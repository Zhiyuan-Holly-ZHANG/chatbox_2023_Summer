var MSG_SIGNATURE = "Generated by Speechlogger", 
    MSG_SAVED = "Session saved on your browser and sent to be saved on disk. <br><br>To load, go to the open button. <br><br>You don't need to bother saving if Auto-Save is checked, unless you want it saved on disk outside of your browser.", 
    MSG_URLTOOLONG = "We're sorry, but the text was too long for your browser to automatically export, so we had to cut off the last part.<br>If you need the whole text, please copy and paste it in manually.", MSG_UPGRADE = "Web Speech API is not supported by this browser. Switch to <a href='//www.google.com/chrome'>Chrome</a>",
    MSG_NOAVAILABLESPACE = "We were unable to save since your browser ran out of storage space. <br>You can clear space by deleting older sessions saved in your browser. Otherwise, you may uncheck 'Auto Save' in prefs to disable auto saving altogether.", MSG_DEFAULT_NOTE_TITLE = "Please note", 
    TIMER_TRANSCRIPTION_RESET = 600000, dateLastCalculatedTimers, timeRemainingTranscription;
function getRemainingDollarBalance() {
    return window.hasOwnProperty("appState") && appState.temp && void 0 != appState.temp.dollarBalance && null != appState.temp.dollarBalance ? appState.temp.dollarBalance : 0
}
function getIsSignedIn() {
    return window.hasOwnProperty("appState") && appState.temp ? appState.temp.isSignedIn : !1
} 
if (!isPremium()) { getTimersFromStorage(); var myCounterInterval$0 = setInterval(countdownCreditTimer, 1E3) }
function countdownCreditTimer() {
    if (dateLastCalculatedTimers != getCurrentDateInStringFormat()) resetTimers(); else if (variables.recognizing) {
        var a = Math.min(timeRemainingTranscription - 1, TIMER_TRANSCRIPTION_RESET); getIsSignedIn() && 0 > a && 0 == a % 60 && (a = getRemainingDollarBalance() - .1, updateStateWithProps({ dollarBalance: a }, null), 0 <= a ? Api.chargeTranslationMinute() : isPremium() || (startButton(), $("#purchaseModal").modal({ show: !0 })), a = 0);
        setTimers(a)
    }
}
function myStopFunction() { clearInterval(myCounterInterval) }
function setTimers(a) {
    if (void 0 == a || null == a) a = timeRemainingTranscription;
    timeRemainingTranscription = a;
    dateLastCalculatedTimers = getCurrentDateInStringFormat();
    localStorage.setItem("timeRemainingTranscription", "" + timeRemainingTranscription);
    localStorage.setItem("dateLastCalculatedTimers", getCurrentDateInStringFormat());
    $("[data-label-for=remaining-minutes]").text(secsToStringFormat(600 * getRemainingDollarBalance() + timeRemainingTranscription))
}
function resetTimers() {
    setTimers(TIMER_TRANSCRIPTION_RESET)
}
function getTimersFromStorage() {
    dateLastCalculatedTimers = localStorage.getItem("dateLastCalculatedTimers");
    dateLastCalculatedTimers != getCurrentDateInStringFormat() ? resetTimers() : (timeRemainingTranscription = parseInt(localStorage.getItem("timeRemainingTranscription")), isNaN(timeRemainingTranscription) ? resetTimers() : setTimers(timeRemainingTranscription))
}
function getCurrentDateInStringFormat() {
    var a = new Date, c = a.getDate(), b = a.getMonth() + 1;
    a = a.getFullYear();
    10 > c && (c = "0" + c); 10 > b && (b = "0" + b);
    return "" + a + b + c
}
function secsToStringFormat(a) {
    0 > a && (a = 0);
    var c = a % 60;
    a = Math.floor(a / 60);
    10 > c && (c = "0" + c);
    return "" + a + ":" + c
}
function generateTranscriptionCommands(a) {
    a = a.split("-")[0]; var c = [":-)", ":-)", ":-(", ".", ",", "?", ":", ";", "!", "-", NEW_LINE, "(", ")"]; switch (a) {
        case "de": var b = ["not_implemented"];
            a = " punkt; komma; fragezeichen; doppelpunkt; semikolon; semikolon; semikolon; ausrufezeichen; ausrufezeichen; neue zeile; neuer absatz; klammer \u00f6ffnen; klammer schlie\u00dfen; bindestrich".split("; "); var d = ["smiley", "trauriges gesicht", "Bindestrich "];
            var e = [".", ", ", " ? ", " : ", "; ", "; ", "; ", "!", "!", NEW_LINE, NEW_LINE + NEW_LINE,
                "(", ")", "-"];
            var f = [":-)", ":-(", "- "];
            this.period = "Punkt";
            this.comma = "Komma";
            this.question = "Fragezeichen";
            this.colon = "Doppelpunkt";
            this.semi = "Semikolon";
            this.exclamation = "Ausrufezeichen";
            this.dash = "Bindestrich";
            this.line = "Neue Zeile";
            this.paragraph = "Neuer Absatz";
            this.open = "Klammer \u00f6ffnen";
            this.close = "Klammer schlie\u00dfen";
            this.smiley = "Smiley";
            this.sad = "Trauriges Gesicht";
            break;
        case "es": b = ["not_implemented"];
            a = " coma; signo de interrogaci\u00f3n; dos puntos; 2 puntos; punto y coma; punto y,; punto y ,;. y coma;. y,;. y ,; punto; signo de exclamaci\u00f3n; exclamaci\u00f3n; nueva l\u00ednea; nuevo apartado; abrir par\u00e9ntesis; cerrar par\u00e9ntesis; gui\u00f3n".split("; ");
            d = ["cara sonriente", "cara triste", "gui\u00f3n "];
            e = [",", "?", ":", ":", ";", ";", ";", ";", ";", ";", ".", "!", "!", NEW_LINE, NEW_LINE + NEW_LINE, "(", ")", "-"]; f = [":-)", ":-(", "- "];
            this.period = "Punto";
            this.comma = "Coma";
            this.question = "Signo de interrogaci\u00f3n";
            this.colon = "Dos puntos";
            this.semi = "Punto y coma";
            this.exclamation = "Signo de exclamaci\u00f3n, Exclamaci\u00f3n";
            this.dash = "Gui\u00f3n";
            this.line = "Nueva l\u00ednea";
            this.paragraph = "Nuevo apartado";
            this.open = "Abrir par\u00e9ntesis";
            this.close = "Cerrar par\u00e9ntesis";
            this.smiley = "Cara sonriente";
            this.sad = "Cara triste";
            break;
        case "fr": b = ["not_implemented"];
            a = " virgule; point d'interrogation; deux-points; deux points; 2 points; point-virgule; point virgule; point ,; point,; point d'exclamation; point; nouvelle ligne; nouveau paragraphe; ouvrir la parenth\u00e8se; fermer la parenth\u00e8se; tiret".split(";"); d = ["smiley", "visage triste", "tiret "]; e = [",", "?", ":", ":", ":", ";", ";", ";", ";", "!", ".", NEW_LINE, NEW_LINE + NEW_LINE, "(", ")", "-"]; f = [":-)", ":-(", "- "];
            this.period =
                "Point";
            this.comma = "Virgule";
            this.question = "Point d'interrogation";
            this.colon = "Deux-points";
            this.semi = "Point-virgule";
            this.exclamation = "Point d'exclamation";
            this.dash = "Tiret";
            this.line = "Nouvelle ligne";
            this.paragraph = "Nouveau paragraphe";
            this.open = "Ouvrir la parenth\u00e8se";
            this.close = "Fermer la parenth\u00e8se";
            this.smiley = "Smiley";
            this.sad = "Visage triste"; break;
        case "it": b = ["not_implemented"];
            a = " virgula; punto interrogativo; due punti; 2 punti; punto e virgola; punto e,; punto e ,; esclamativo; punto esclamativo; punto; nuova riga; nuovo paragrafo; apri parentesi; chiudi parentesi; trattino".split("; ");
            d = ["smiley", "faccina sorridente", "faccina triste", "trattino "]; e = [",", "?", ":", ":", ";", ";", ";", "!", "!", ".", NEW_LINE, NEW_LINE + NEW_LINE, "(", ")", "-"]; f = [":-)", ":-)", ":-(", "- "];
            this.period = "Punto";
            this.comma = "Virgola";
            this.question = "Punto interrogativo";
            this.colon = "Due punti";
            this.semi = "Punto e virgula";
            this.exclamation = "Esclamativo, Punto esclamativo";
            this.dash = "Trattino";
            this.line = "Nuova riga";
            this.paragraph = "Nuovo paragrafo";
            this.open = "Apri parentesi";
            this.close = "Chiudi parentesi";
            this.smiley = "Smiley, Faccina sorridente";
            this.sad = "Faccina triste";
            break;
        case "ru": b = ["not_implemented"];
            a = " \u0437\u0430\u043f\u044f\u0442\u0430\u044f; \u0432\u043e\u043f\u0440\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0437\u043d\u0430\u043a; \u0434\u0432\u043e\u0435\u0442\u043e\u0447\u0438\u0435; \u0442\u043e\u0447\u043a\u0430 \u0441 \u0437\u0430\u043f\u044f\u0442\u043e\u0439; \u0442\u043e\u0447\u043a\u0430 \u0441,; \u0442\u043e\u0447\u043a\u0430 \u0441 ,; \u0442\u043e\u0447\u043a\u0430; \u0432\u043e\u0441\u043a\u043b\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b; \u0432\u043e\u0441\u043a\u043b\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0437\u043d\u0430\u043a; \u043d\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430; \u043d\u043e\u0432\u044b\u0439 \u043f\u0430\u0440\u0430\u0433\u0440\u0430\u0444; \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0430\u044f\u0441\u044f \u0441\u043a\u043e\u0431\u043a\u0430; \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0430\u044f\u0441\u044f \u0441\u043a\u043e\u0431\u043a\u0430; \u0442\u0438\u0440\u0435".split(";");
            d = ["\u0441\u043c\u0430\u0439\u043b\u0438\u043a", "\u0443\u043b\u044b\u0431\u043e\u0447\u043a\u0430", "\u0433\u0440\u0443\u0441\u0442\u043d\u043e\u0435 \u043b\u0438\u0446\u043e", "\u0442\u0438\u0440\u0435 "]; e = [",", "?", ":", ";", ";", ";", ".", "!", "!", NEW_LINE, NEW_LINE + NEW_LINE, "(", ")", "-"]; f = [":-)", ":-)", ":-(", "- "];
            this.period = "\u0422\u043e\u0447\u043a\u0430";
            this.comma = "\u0417\u0430\u043f\u044f\u0442\u0430\u044f";
            this.question = "\u0412\u043e\u043f\u0440\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0437\u043d\u0430\u043a";
            this.colon = "\u0414\u0432\u043e\u0435\u0442\u043e\u0447\u0438\u0435";
            this.semi = "\u0422\u043e\u0447\u043a\u0430 \u0441 \u0437\u0430\u043f\u044f\u0442\u043e\u0439";
            this.exclamation = "\u0412\u043e\u0441\u043a\u043b\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b, \u0412\u043e\u0441\u043a\u043b\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0437\u043d\u0430\u043a";
            this.dash = "\u0422\u0438\u0440\u0435";
            this.line = "\u041d\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430";
            this.paragraph = "\u041d\u043e\u0432\u044b\u0439 \u043f\u0430\u0440\u0430\u0433\u0440\u0430\u0444";
            this.open = "\u041e\u0442\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0430\u044f\u0441\u044f \u0441\u043a\u043e\u0431\u043a\u0430";
            this.close = "\u0417\u0430\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0430\u044f\u0441\u044f \u0441\u043a\u043e\u0431\u043a\u0430";
            this.smiley = "\u0421\u043c\u0430\u0439\u043b\u0438\u043a, \u0423\u043b\u044b\u0431\u043e\u0447\u043a\u0430";
            this.sad = "\u0413\u0440\u0443\u0441\u0442\u043d\u043e\u0435 \u043b\u0438\u0446\u043e";
            break;
        case "ja": b = ["not_implemented"];
            a = " \u30d4\u30ea\u30aa\u30c9 ; \u30b3\u30f3\u30de ; \u7591\u554f\u7b26 ; \u30b3\u30ed\u30f3 ; \u30bb\u30df\u30b3\u30ed\u30f3 ; \u611f\u5606\u7b26 ;\u611f\u5606\u7b26\u8a18\u53f7; \u6539\u884c ; \u65b0\u3057\u3044\u6bb5\u843d ; \u62ec\u5f27\u958b\u304d ; \u62ec\u5f27\u9589\u3058; \u30c0\u30c3\u30b7\u30e5 ".split(";"); d = [" \u30b9\u30de\u30a4\u30ea\u30fc ", " \u60b2\u3057\u3044\u9854 ", " \u30c0\u30c3\u30b7\u30e5 "]; e = [". ", ", ", "? ", ": ", "; ", "! ", "! ", NEW_LINE, NEW_LINE +
                NEW_LINE, " (", ") ", "-"]; f = [" :-) ", " :-( ", "-"];
            this.period = "\u30d4\u30ea\u30aa\u30c9";
            this.comma = "\u30b3\u30f3\u30de";
            this.question = "\u7591\u554f\u7b26";
            this.colon = "\u30b3\u30ed\u30f3";
            this.semi = "\u30bb\u30df\u30b3\u30ed\u30f3";
            this.exclamation = "\u611f\u5606\u7b26, \u611f\u5606\u7b26\u8a18\u53f7";
            this.dash = "\u30c0\u30c3\u30b7\u30e5";
            this.line = "\u6539\u884c";
            this.paragraph = "\u65b0\u3057\u3044\u6bb5\u843d";
            this.open = "\u62ec\u5f27\u958b\u304d";
            this.close = "\u62ec\u5f27\u9589\u3058";
            this.smiley = "\u30b9\u30de\u30a4\u30ea\u30fc";
            this.sad = "\u60b2\u3057\u3044\u9854";
            break;
        case "cmn": b = ["not_implemented"];
            a = " \u53e5\u53f7 ; \u9017\u53f7 ; \u95ee\u53f7 ; \u5192\u53f7 ; \u5206\u53f7 ; \u611f\u53f9\u53f7 ; \u6362\u884c ; \u65b0\u6bb5\u843d ; \u5de6\u5706\u62ec\u53f7 ; \u53f3\u5706\u62ec\u53f7; \u7834\u6298\u53f7 ".split(";"); d = [" \u7b11\u8138 ", " \u60b2\u4f24\u7684\u8138 ", " \u7834\u6298\u53f7 "]; e = [". ", ", ", "? ", ": ", "; ", "! ", NEW_LINE, NEW_LINE + NEW_LINE, " (", ") ", "\u2014\u2014"]; f = [" :-) ", " :-( ", "\u2014\u2014"];
            this.period =
                "\u53e5\u53f7";
            this.comma = "\u9017\u53f7";
            this.question = "\u95ee\u53f7";
            this.colon = "\u5192\u53f7";
            this.semi = "\u5206\u53f7";
            this.exclamation = "\u611f\u53f9\u53f7";
            this.dash = "\u7834\u6298\u53f7";
            this.line = "\u6362\u884c";
            this.paragraph = "\u65b0\u6bb5\u843d";
            this.open = "\u5de6\u5706\u62ec\u53f7";
            this.close = "\u53f3\u5706\u62ec\u53f7";
            this.smiley = "\u7b11\u8138";
            this.sad = "\u60b2\u4f24\u7684\u8138"; break;
        case "ar": b = ["not_implemented"];
            a = " \u0641\u062a\u0631\u0629 ; \u0641\u0627\u0635\u0644\u0629 \u0645\u0641\u0627\u0635\u0644\u0629; \u0639\u0644\u0627\u0645\u0629 \u0627\u0633\u062a\u0641\u0647\u0627\u0645; \u0646\u0642\u0637\u062a\u0627\u0646; \u0646\u0642\u0648\u0637\u0629; \u0637\u0629 \u0627\u0644\u062a\u0639\u062c\u0628; \u0639\u0644\u0627\u0645\u0629 \u062a\u0639\u062c\u0628\u060c ; \u062e\u0637 \u062c\u062f\u064a\u062f; \u0641\u0642\u0631\u0629 \u062c\u062f\u064a\u062f\u0629; \u0627\u0641\u062a\u062d \u0627\u0644\u0642\u0648\u0633\u0627\u0646; \u0623\u063a\u0644\u0642 \u0627\u0644\u0642\u0648\u0633\u0627\u0646; \u0627\u0644\u0634\u0631\u0637\u0629".split(";");
            d = ["\u0645\u0628\u062a\u0633\u0645", "\u0648\u062c\u0647 \u062d\u0632\u064a\u0646", "\u0627\u0644\u0634\u0631\u0637\u0629 "]; e = [".", ";", "?", ":", ",", "!", "!", NEW_LINE, NEW_LINE + NEW_LINE, "(", ")", "-"]; f = [":-)", ":-(", "- "];
            this.period = "\u0641\u062a\u0631\u0629";
            this.comma = "\u0641\u0627\u0635\u0644\u0629";
            this.question = "\u0639\u0644\u0627\u0645\u0629 \u0627\u0633\u062a\u0641\u0647\u0627\u0645";
            this.colon = "\u0646\u0642\u0637\u062a\u0627\u0646";
            this.semi = "\u0641\u0627\u0635\u0644\u0629 \u0645\u0641\u0627\u0635\u0644\u0629";
            this.exclamation = "\u0639\u0644\u0627\u0645\u0629 \u062a\u0639\u062c\u0628\u060c \u0646\u0642\u0637\u0629 \u0627\u0644\u062a\u0639\u062c\u0628";
            this.dash = "\u0627\u0644\u0634\u0631\u0637\u0629";
            this.line = "\u062e\u0637 \u062c\u062f\u064a\u062f";
            this.paragraph = "\u0641\u0642\u0631\u0629 \u062c\u062f\u064a\u062f\u0629";
            this.open = "\u0627\u0641\u062a\u062d \u0627\u0644\u0642\u0648\u0633\u0627\u0646";
            this.close = "\u0623\u063a\u0644\u0642 \u0627\u0644\u0642\u0648\u0633\u0627\u0646";
            this.smiley = "\u0645\u0628\u062a\u0633\u0645\u060c \u0648\u062c\u0647 \u0645\u0628\u062a\u0633\u0645";
            this.sad = "\u0648\u062c\u0647 \u062d\u0632\u064a\u0646";
            break;
        case "pt": b = ["not_implemented"];
            a = " interroga\u00e7\u00e3o; dois pontos; 2 pontos; ponto e v\u00edrgula; ponto e,; ponto e ,; ponto; v\u00edrgula; exclama\u00e7\u00e3o; nova linha; par\u00e1grafo; abre par\u00eantese; fecha par\u00eantese; h\u00edfen".split("; "); e = [" ? ", " : ", ": ", "; ", "; ", "; ", ".", ", ", "!", NEW_LINE, NEW_LINE + NEW_LINE, "(", ")", " - "]; d = ["smiley", "rosto triste", "h\u00edfen "]; f = [": -) ", ": -(", " - "];
            this.period = "Ponto";
            this.comma = "V\u00edrgula";
            this.question = "Interroga\u00e7\u00e3o";
            this.colon = "Dois pontos";
            this.semi = "Ponto e v\u00edrgula";
            this.exclamation = "Exclama\u00e7\u00e3o";
            this.dash = "H\u00edfen";
            this.line = "Nova linha";
            this.paragraph = "Par\u00e1grafo";
            this.open = "Abre par\u00eantese";
            this.close = "Fecha par\u00eantese";
            this.smiley = "Smiley";
            this.sad = "Rosto triste"; break;
        default: b = ["not_implemented"], a = " period; comma; question mark; colon; semicolon; semi colon; semi: ; semi: ; exclamation mark; exclamation point; new line; new paragraph; open parentheses; close parentheses; hyphen".split("; "),
            d = ["smiley", "smiley face", "sad face", "dash "], e = [".", ",", "?", ":", ";", ";", ";", ";", "!", "!", NEW_LINE, NEW_LINE + NEW_LINE, "(", ")", "-"], f = [":-)", ":-)", ":-(", "- "], this.period = "Period", this.comma = "Comma", this.question = "Question mark", this.colon = "Colon", this.semi = "Semi Colon", this.exclamation = "Exclamation mark, Exclamation point", this.dash = "Dash, Hyphen", this.line = "New line", this.paragraph = "New paragraph", this.open = "Open parentheses", this.close = "Close parentheses", this.smiley = "Smiley, Smiley face", this.sad =
            "Sad face"
    }this.listActionCommands = b;
    this.listBreakCommands = d.concat(a, c, b);
    this.listToReplaceCommands = a.concat(d);
    for (c = 0;
        c < a.length;
        c++)a[c] = trimSpaces(a[c]);
    this.listToReplaceCommands = this.listToReplaceCommands.concat(a);
    for (c = 0;
        c < a.length;
        c++)a[c] = capitalize(a[c]);
    for (c = 0;
        c < d.length;
        c++)d[c] = capitalize(d[c]);
    this.listToReplaceCommands = this.listToReplaceCommands.concat(a, d);
    this.listToReplaceMarks = e.concat(f, e)
}
var END_OF_SENTENCE_SYMBOLS = [".", ":", "?", "!", ":-)", ":-(", NEW_LINE, "\n"], PUNCTUATION_SYMBOLS = [".", ",", ";", "-", "(", ")", ":", "?", "!", ":-)", ":-(", NEW_LINE, "\n", QUATATION], COMMANDS = new generateTranscriptionCommands("en-US"), listActionCommands = COMMANDS.listActionCommands, listBreakCommands = COMMANDS.listBreakCommands, listToReplaceCommands = COMMANDS.listToReplaceCommands, listToReplaceMarks = COMMANDS.listToReplaceMarks, variables = null, isToRestartImmediately, isResultInBuffer = !1, resultInBuffer = "", symbolToAppend =
    null;
credit_show.innerHTML = "<b>" + localStorage.getItem("currentCredit") + "</b>";
credit_show2.innerHTML = "<b>" + localStorage.getItem("currentCredit") + "</b>"; function bindEsc() { $(document).unbind("keyup"); $(document).keyup(function (a) { 27 == a.keyCode && ($(".activityContainer").hide(), unbindEsc()) }) } function unbindEsc() { "full" === localStorage.getItem("style") && $(document).keyup(function (a) { 27 == a.keyCode && changeStyle() }) } "full" === localStorage.getItem("style") && $(document).keyup(function (a) { 27 == a.keyCode && changeStyle() });
if ("speechSynthesis" in window) { var msg = new SpeechSynthesisUtterance("Welcome to Speech logger"); msg.volume = 1; msg.rate = .9; msg.pitch = 1; msg.lang = "en-GB"; msg.onend = function () { msg.text = "speech_utterance_ended_111" } } var currentSession = new Session, readLang = "", allowedReadLangs = "en es fr it de ja ko zh-CN zh-TW".split(" "), correspondingReadLangs = "en-GB es-ES fr-FR it-IT de-DE ja-JP ko-KR zh-CN zh-CN".split(" "), timeBox = "", RTL_languages = ["he", "iw", "ar"], saveToIndex = localStorage.sessionIndex; variables = new Variables;
var t_punctuation, timeRunnerFromLastResult, timeRunnerToFinalizeInterim; timeRunnerFromLastResult = setTimeout(function () { }, 1500); var searchFlag = !1;
function Variables() {
    this.savedOnce = !1;
    this.timer = 0;
    this.firstTime = !0;
    this.recognizing = !1;
    this.new_sentence = this.lastwasfinal = this.intentionalPause = !0;
    this.startSubTime = this.newTimestampFinal = this.oldTimestamp = this.newTimestamp = this.dif_final_interim = this.start_timestamp = 0;
    this.punctuation = ".";
    this.addLineBreaks = !1;
    this.sentence = "";
    this.firstArrival = 0;
    this.last_interim = "";
    this.resultTextInstance = new TextInstance
}
$("#interface_lang option[value='" + interfaceLang + "']").attr("selected", !0);
localStorage.interfaceLang = interfaceLang; function updateInterface() {
    localStorage.interfaceLang = interface_lang.value; switch (interface_lang.value) {
        case "Hebrew": window.location.assign("../he/"); break;
        case "English": window.location.assign("https://speechlogger.appspot.com"); break;
        case "Romanian": window.location.assign("../ro/"); break;
        default: window.location.assign("../" + interface_lang.value + "/")
    }
}
var source_lang = "en", trans_lang = "es";
if (null === localStorage.getItem("selectedLanguage")) switch (localStorage.getItem("interfaceLang")) {
    case "de": localStorage.setItem("selectedLanguage", "de-DE"); break;
    case "es": localStorage.setItem("selectedLanguage", "es-ES"); break;
    case "fr": localStorage.setItem("selectedLanguage", "fr-FR"); break;
    case "ja": localStorage.setItem("selectedLanguage", "ja-JP"); break;
    case "ru": localStorage.setItem("selectedLanguage", "ru-RU"); break;
    case "it": localStorage.setItem("selectedLanguage", "it-IT"); break;
    case "zh": case "cn": localStorage.setItem("selectedLanguage",
        "cmn-Hans-CN"); break;
    case "ar": localStorage.setItem("selectedLanguage", "ar-EG"); break;
    case "pt": localStorage.setItem("selectedLanguage", "pt-BR"); break;
    default: localStorage.setItem("selectedLanguage", "en-US")
}
var langs = initializeLanguages(); $("#select_language option[value='" + localStorage.selectedLanguage + "']").attr("selected", !0); updateLanguage();
if (null === localStorage.getItem("selectedTranslation") || localStorage.selectedTranslation.split("-")[0] === localStorage.selectedLanguage.split("-")[0]) localStorage.selectedLanguage.split("-")[0] === interfaceLang ? localStorage.selectedTranslation = defaultTrans : localStorage.selectedTranslation = interfaceLang; $("#translate_lang option[value='" + localStorage.selectedTranslation + "']").attr("selected", !0); $("#translate_lang option[value='" + select_language.value + "']").attr("disabled", "disabled").siblings().removeAttr("disabled");
updateTranslateLang();
var time_to_period = 1E3, time_to_newline = 3E3, time_to_2lines = 1E4, punctMarks = new PunctMarks; generateMarks("question", "start"); generateMarks("question", "end"); generateMarks("question", "any"); generateMarks("colon", "start"); generateMarks("colon", "end"); generateMarks("colon", "any"); generateMarks("exclamation", "start"); generateMarks("exclamation", "end"); generateMarks("exclamation", "any"); var en_comma_start = "hi ;hello ;bye bye ;yes ;no ;alright then ;alright ;so ;good job ;good morning ;good afternoon ;good evening ;goodbye ;good ;fine ;hey ;sure thing ;sure ;ok ;okay ".split(";");
updateTagList("start");
updateTagList("end"); updateTagList("any");
function updateLanguage() {
    localStorage.setItem("selectedLanguage", select_language.value); switch (select_language.value) {
        case "cmn-Hans-CN": case "cmn-Hans-HK": case "cmn-Hant-TW": case "yue-Hant-HK": source_lang = "zh"; break;
        default: source_lang = select_language.value.split("-")[0]
    }trans_lang = translate_lang.value.split("-")[0]; source_lang === trans_lang && (-1 !== trans_langs.indexOf(source_lang) ? $("#translate_lang option[value='" + source_lang + "']").attr("selected", !0) : $("#translate_lang option[value='en']").attr("selected",
        !0), updateTranslateLang());
    -1 !== trans_langs.indexOf(select_language.value) && $("#translate_lang option[value='" + source_lang + "']").attr("disabled", "disabled").siblings().removeAttr("disabled"); "he" == source_lang || "ar" == source_lang ? $("#output_box").removeClass("ltr").addClass("rtl") : $("#output_box").removeClass("rtl").addClass("ltr"); time_to_period = 1E3; time_to_newline = 3E3; time_to_2lines = 1E4; punctMarks = new PunctMarks; generateMarks("question", "start"); generateMarks("question", "end"); generateMarks("question",
        "any"); generateMarks("colon", "start");
    generateMarks("colon", "end"); generateMarks("colon", "any");
    generateMarks("exclamation", "start"); generateMarks("exclamation", "end"); generateMarks("exclamation", "any"); updateTagList("start"); updateTagList("end"); updateTagList("any"); punct_act_language.innerHTML = $("#select_language option[value='" + select_language.value + "']").text();
    COMMANDS = new generateTranscriptionCommands(select_language.value); listActionCommands = COMMANDS.listActionCommands; listBreakCommands = COMMANDS.listBreakCommands;
    listToReplaceCommands = COMMANDS.listToReplaceCommands; listToReplaceMarks = COMMANDS.listToReplaceMarks; document.getElementById("cell_period").title = COMMANDS.period; document.getElementById("cell_comma").title = COMMANDS.comma; document.getElementById("cell_question").title = COMMANDS.question; document.getElementById("cell_colon").title = COMMANDS.colon; document.getElementById("cell_semi").title = COMMANDS.semi; document.getElementById("cell_exclamation").title = COMMANDS.exclamation; document.getElementById("cell_dash").title =
        COMMANDS.dash; document.getElementById("cell_line").title = COMMANDS.line; document.getElementById("cell_paragraph").title = COMMANDS.paragraph; document.getElementById("cell_open").title = COMMANDS.open; document.getElementById("cell_close").title = COMMANDS.close; document.getElementById("cell_smiley").title = COMMANDS.smiley; document.getElementById("cell_sad").title = COMMANDS.sad; null !== variables && variables.recognizing && restartListening()
}
function updateTranslateLang() { trans_lang = localStorage.selectedTranslation = translate_lang.value; -1 < allowedReadLangs.indexOf(trans_lang) ? (readLang = correspondingReadLangs[allowedReadLangs.indexOf(trans_lang)], $(".readOut_button").show()) : (readLang = "NA", $(".readOut_button").hide()) } function addTranslationKey(a) { localStorage.setItem("translationKey", a) } $(".final").on("mouseenter", ".results_anchor", function () { var a = this.id.split("_")[1]; $("#trans_" + a).addClass("highlight"); $("#results_" + a).addClass("highlight") });
$(".final").on("mouseleave", ".results_anchor", function () { var a = this.id.split("_")[1]; $("#trans_" + a).removeClass("highlight"); $("#results_" + a).removeClass("highlight") }); $(".final").on("click", ".results_anchor", function () { $(this).attr("contenteditable", !0); $(this).siblings(".timeDisplay").removeClass("timeDisplay"); $(this).removeClass("highlight"); $(this).focus() });
$(".final").on("blur", ".results_anchor", function () {
    $(this).attr("contenteditable", !1); switch (localStorage.displayTimeFlag) {
        case "real": $(this).siblings(".realTimeDisplay").addClass("timeDisplay"); break;
        case "dif": $(this).siblings(".difTimeDisplay").addClass("timeDisplay")
    }
});
$("#output_panel").on("focus", ".results_anchor", function () {
    this.id.split("_");
    return $(this)
}).on("blur", ".results_anchor", function () {
    var a = $(this); "undefined" == typeof a[0].childNodes[0] && (a[0].innerHTML = "..."); "true" === localStorage.autoSave && (updateInstanceByID(this.id.split("_")[0], this.id.split("_")[1], a[0].innerText), localSave());
    return a
});
function updateInstanceByID(a, c, b) {
    var d = currentSession.transcript.length, e = Math.floor(d / 2), f = 0, g = d - 1;
    c = parseInt(c); for (var h = 0;
        c != currentSession.transcript[e].id && h < 2 * d;)h++, c < currentSession.transcript[e].id ? (g = e - 1, e = Math.floor(e - (e - f) / 2), e < f && (e = f)) : (f = e + 1, e = Math.floor(e + (g + 1 - e) / 2), e > g && (e = g)); if (c == currentSession.transcript[e].id) switch (a) {
            case "results": currentSession.transcript[e].textContent = b; break;
            case "trans": currentSession.transcript[e].translatedContent = b
        }
}
function changeColor(a) {
    switch (a) {
        case "custom": a = favcolor.value; break;
        case "blue": a = "#97d1fd"; break;
        case "green": a = "#aae89d"; break;
        case "red": a = "#f1a5bc"; break;
        case "yellow": a = "#ebf475"; break;
        case "gray": a = "#dadada"
    }$("#application").css("background-color", a); localStorage.favColor = a
} null === localStorage.getItem("favColor") && (localStorage.favColor = "#97d1fd"); $("#favcolor").attr("value", localStorage.favColor); $("#application").css("background-color", localStorage.favColor);
null === localStorage.getItem("sessionsList") && (localStorage.sessionsList = ""); null === localStorage.getItem("autoPunctuation") && ("en" == select_language.value.split("-", 1)[0] ? localStorage.autoPunctuation = "true" : localStorage.autoPunctuation = "false"); $("#punctuation_checkbox").prop("checked", "true" === localStorage.autoPunctuation); null === localStorage.getItem("translation") && (localStorage.translation = "false"); $("#translate_checkbox").prop("checked", "true" === localStorage.translation);
"true" === localStorage.getItem("translation") && ($("#translate_options").show(), $("#translations").show(), $("#translations_box").show(), $("#results").addClass("narrowbox", 0).removeClass("widebox").addClass("leftbox", 0), $("#results_box").addClass("narrowbox", 0).removeClass("widebox").addClass("leftbox", 0)); null === localStorage.getItem("readOut") && (localStorage.readOut = "speechSynthesis" in window ? "true" : "false"); $("#read_checkbox").prop("checked", "true" === localStorage.readOut);
"false" === localStorage.getItem("readOut") && (document.getElementById("speak_button_img").src = "../images/speak_off_48x48.png"); null === localStorage.getItem("highlightUncertain") && (localStorage.highlightUncertain = "true"); $("#uncertain_checkbox").prop("checked", "true" === localStorage.highlightUncertain); null === localStorage.getItem("autoSave") && (localStorage.autoSave = "true"); $("#save_checkbox").prop("checked", "true" === localStorage.autoSave);
null === localStorage.getItem("threshhold_confidence") && (localStorage.threshhold_confidence = "0.85"); null === localStorage.getItem("max_suggestions") && (localStorage.max_suggestions = "3"); null === localStorage.getItem("displayTimeFlag") && (localStorage.displayTimeFlag = "real"); $("#select_timeDisplay option[value='" + localStorage.displayTimeFlag + "']").attr("selected", !0); updateTime(); null === localStorage.getItem("zoom") && (localStorage.zoom = "1"); zoom(parseFloat(localStorage.zoom)); localStorage.zoom = Math.sqrt(parseFloat(localStorage.zoom));
function updateTime() {
    localStorage.displayTimeFlag = select_timeDisplay.value; switch (localStorage.displayTimeFlag) {
        case "real": $(".realTimeDisplay").addClass("timeDisplay"); $(".difTimeDisplay").removeClass("timeDisplay"); break;
        case "dif": $(".realTimeDisplay").removeClass("timeDisplay"); $(".difTimeDisplay").addClass("timeDisplay"); break;
        default: $(".realTimeDisplay").removeClass("timeDisplay"), $(".difTimeDisplay").removeClass("timeDisplay")
    }
}
$("#translate_checkbox").on("click", function () { translate_checkbox.checked ? (localStorage.setItem("translation", "true"), $("#translate_options").show(), $("#translations").fadeIn(1E3), $("#translations_box").fadeIn(1E3), $("#results").addClass("narrowbox", 0).addClass("leftbox", 200).removeClass("widebox", 500), $("#results_box").addClass("narrowbox", 0).addClass("leftbox", 200).removeClass("widebox", 500)) : (localStorage.setItem("translation", "false"), setNotTranslatingUi()) });
$("#show_transcription_checkbox").on("click", function () { show_transcription_checkbox.checked ? (console.log("should show transcription"), $(".fullWidthRightbox").removeClass("fullWidthRightbox", 500), $(".leftbox").show()) : (console.log("should NOT show transcription"), $(".rightbox").addClass("fullWidthRightbox", 500), $(".leftbox").hide()) });
function setNotTranslatingUi() { $("#translate_options").hide(); $("#translations").fadeOut(1E3); $("#translations_box").fadeOut(1E3); $("#results").addClass("widebox", 500).removeClass("narrowbox").removeClass("leftbox", 200); $("#results_box").addClass("widebox", 500).removeClass("narrowbox").removeClass("leftbox", 200) } $("#save_checkbox").on("click", function () { localStorage.autoSave = save_checkbox.checked });
$("#punctuation_checkbox").on("click", function () { localStorage.autoPunctuation = punctuation_checkbox.checked; "true" == localStorage.getItem("autoPunctuation") && "English" != select_language.value && ($("#punctuation_activity").fadeIn(500), bindEsc()) }); $("#uncertain_checkbox").on("click", function () { (localStorage.highlightUncertain = uncertain_checkbox.checked) ? $(".uncertain").addClass("red_font") : $(".uncertain").removeClass("red_font") });
$("#read_checkbox").on("click", function () { read_checkbox.checked && ("SpeechSynthesisUtterance" in window ? alertNotification("Experimental, works only if you translate to English") : (alertNotification('<a target="_blank" href="chrome://flags/#enable-experimental-web-platform-features">chrome://flags/#enable-experimental-web-platform-features</a>'), $("#read_checkbox").prop("checked", !1))); localStorage.readOut = read_checkbox.checked });
function toggleRead() { "true" === localStorage.getItem("readOut") ? (localStorage.setItem("readOut", "false"), document.getElementById("speak_button_img").src = "../images/speak_off_48x48.png", speechSynthesis.cancel()) : "speechSynthesis" in window ? (localStorage.setItem("readOut", "true"), document.getElementById("speak_button_img").src = "../images/speak_on_48x48.png", speechSynthesis.cancel()) : alert("Sorry, your browser does not support Speech Synthesis") }
function zoom(a) {
    localStorage.zoom = parseFloat(localStorage.zoom) * a; var c = parseInt($("#results").css("font-size")), b = parseInt($("#results").css("line-height"));
    c = a * c + "px"; b = a * b + "px"; $("#results").css({ "font-size": c }); $("#results").css({ "line-height": b }); $("#translations").css({ "font-size": c }); $("#translations").css({ "line-height": b })
}
function newButton() {
    pauseRecognition();
    currentSession = new Session; variables = new Variables; speaker.value = ""; saveToIndex = localStorage.sessionIndex; session_title.innerHTML = sessionTitle + saveToIndex + ", " + newDate.getDate() + " " + monthNames[newDate.getMonth()] + " " + newDate.getFullYear(); final_span.innerHTML = ""; interim_span.innerHTML = ""; final_translation.innerHTML = ""
}
function saveAsTxtFile() {
    if (isPremium()) {
        var a = ""; "" !== speaker.value && (a += "Notes: " + speaker.value + "\n-------------------\n\n");
        a += "Transcript:\n-------------------\n" + final_span.innerText;
        1 < final_translation.innerHTML.length && (a += "\n\nTranslation\n-------------------\n" + final_translation.innerText);
        a += "\n\n" + MSG_SIGNATURE;
        var c = session_title.innerText + ".txt";
        a = a.replace(/\n/g, "\r\n");
        a = new Blob([a], { type: "text/plain;charset=utf-8" });
        var b = document.createElement("a");
        b.setAttribute("id", "downloadLink_id");
        b.download = c;
        b.innerHTML = "Download File";
        b.href = window.webkitURL.createObjectURL(a);
        b.click();
        $("#downloadLink_id").remove()
    } else invokePremiumDialog2()
}
function saveAsDocFile() {
    if (isPremium()) {
        var a = "";
        "" !== speaker.value && (a += "Notes: " + speaker.value + "\n-------------------\n\n");
        a += "Transcript:\n-------------------\n" + final_span.innerText;
        1 < final_translation.innerHTML.length && (a += "\n\nTranslation\n-------------------\n" + final_translation.innerText);
        a += "\n\n" + MSG_SIGNATURE;
        var c = session_title.innerText + ".doc";
        a = a.replace(/\n/g, "\r\n");
        a = new Blob([a], { type: "text/plain;charset=utf-8" }); var b = document.createElement("a");
        b.setAttribute("id", "downloadLink_id");
        b.download = c;
        b.innerHTML = "Download File";
        b.href = window.webkitURL.createObjectURL(a);
        b.click();
        $("#downloadLink_id").remove()
    } else invokePremiumDialog2()
}
function saveAsSrtFile() {
    if (isPremium()) {
        var a = currentSession.toSRT("transcript"), c = session_title.innerText + ".srt";
        a = new Blob([a], { type: "text/plain;charset=utf-8" }); var b = document.createElement("a"); b.setAttribute("id", "downloadLink_id"); b.download = c; b.innerHTML = "Download File"; b.href = window.webkitURL.createObjectURL(a); b.click(); $("#downloadLink_id").remove()
    } else invokePremiumDialog2()
}
function export2googleTranslate() {
    var a = "" + final_span.innerText;
    a += "\n\n" + MSG_SIGNATURE;
    a = "http://translate.google.com/#" + source_lang + "/" + trans_lang + "/" + encodeURIComponent(a); if (1800 < a.length) {
        a = a.substring(0, 1800); var c = a.split("%");
        a = a.split("%", c.length - 1).join("%");
        alertNotification(MSG_URLTOOLONG)
    } window.open(a, "_blank")
} function copyAll() {
    window.getSelection().removeAllRanges(); var a = document.createRange();
    a.selectNode(document.getElementById("results")); window.getSelection().addRange(a)
}
function selectContent(a) {
    window.getSelection().removeAllRanges(); var c = document.createRange();
    c.selectNode(document.getElementById(a)); window.getSelection().addRange(c)
}
function emailButton() {
    pauseRecognition(); var a = ""; "" !== speaker.value && (a += "Notes: " + speaker.value + "\n_________________\n\n");
    a += "Transcript:\n_________________\n" + final_span.innerText; 1 < final_translation.innerHTML.length && (a += "\n\nTranslation\n_________________\n" + final_translation.innerText);
    a += "\n\n" + MSG_SIGNATURE;
    a = "mailto:?subject=" + encodeURI(session_title.innerText) + "&body=" + encodeURIComponent(a); if (1200 < a.length) {
        a = a.substring(0, 1200); var c = a.split("%");
        a = a.split("%", c.length - 1).join("%");
        alertNotification(MSG_URLTOOLONG)
    } window.open(a, "_blank")
}
function printButton() {
    if (isPremium()) {
        pauseRecognition(); var a = session_title.innerText + "<br><br>"; "" !== speaker.value && (a += "Notes: " + speaker.value + "<br>_________________<br>");
        a += final_span.innerText; 1 < final_translation.innerHTML.length && (a += "<br><br>_________________<br>" + final_translation.innerText);
        a += "<br><br>" + MSG_SIGNATURE;
        a = a.replace(/\n/g, "<br>"); var c = window.open("", "print to", "height=400,width=600");
        c.document.write("<html><head><title>print to</title>");
        c.document.write("</head><body >");
        c.document.write(a);
        c.document.write("</body></html>");
        c.document.close();
        c.focus();
        c.print();
        c.close();
        return !0
    } invokePremiumDialog2()
} function saveToDrive() {
    if (isPremium())
        return pauseRecognition(), checkAuth2(), !0; invokePremiumDialog2()
}
function saveButton() {
    localSave(); toastNotification(MSG_SAVED);
    currentSession.session_title = session_title.innerText;
    currentSession.timer = variables.timer;
    currentSession.notes = speaker.value; var a = session_title.innerText + ".tst", c = JSON.stringify(currentSession);
    c = new Blob([c], { type: "text/plain;charset=utf-8" }); var b = document.createElement("a"); b.setAttribute("id", "downloadLink_id"); b.download = a; b.innerHTML = "Download File"; b.href = window.webkitURL.createObjectURL(c); b.click(); $("#downloadLink_id").remove()
}
function handleFileSelect() {
    console.log("file selected"); var a = document.getElementById("selected_file").files; if (a.length) {
        a = a[0]; var c = new FileReader;
        c.onloadend = function (b) { b.target.readyState == FileReader.DONE && loadSession(b.target.result) };
        c.readAsText(a)
    } else alert("Please select a file!")
} document.getElementById("selected_file").addEventListener("change", handleFileSelect, !1); var lastResultTimestamp = 0, lastStartTimeStamp = 0, firstInterimTimeStamp = 0, strToPass = "";
$(document).keydown(function (a) {
    return "115" != a.which && "83" != a.which || !a.ctrlKey && !a.metaKey ? !0 : (a.preventDefault(), saveButton(), !1)
}); $(document).keydown(function (a) { 13 == a.keyCode && variables.recognizing && "" != resultInBuffer && (a.preventDefault(), restartListening()) }); var timeTimeout = null, sentenceTimeout = null, paragraphTimeout = null; function onTimeTimeout() {
    null !== timeTimeout && (clearTimeout(timeTimeout), timeTimeout = null);
    console.log("onTimeTimeout"); restartListening()
}
function onSentenceTimeout(a) {
    console.log("onSentenceTimeout"); if ("true" === localStorage.getItem("autoPunctuation") && 0 < variables.sentence.length) {
        var c = setPunctuation(variables.sentence); $("#results_" + a).html($("#results_" + a).html() + c); variables.resultTextInstance.textContent += c; 0 < $("#trans_" + a).html().length && ($("#trans_" + a).html($("#trans_" + a).html() + c), variables.resultTextInstance.translatedContent += c); "true" === localStorage.autoSave && localSave(); variables.new_sentence = !0; variables.sentence = ""; paragraphTimeout =
            setTimeout(onParagraphTimeout, 3E3, a)
    }
}
function onParagraphTimeout(a) {
    console.log("onParagraphTimeout"); if ("true" === localStorage.getItem("autoPunctuation") && !isLastSymbolAnyOf(variables.resultTextInstance.textContent, NEW_LINE)) {
        var c = NEW_LINE; document.getElementById("results_" + a).innerText += c; variables.resultTextInstance.textContent += c; void 0 !== $("#trans_" + a).html() && 0 < $("#trans_" + a).html().length && (document.getElementById("trans_" + a).innerText += c, variables.resultTextInstance.translatedContent += c); "true" === localStorage.autoSave && localSave();
        variables.new_sentence = !0; variables.sentence = ""
    }
}
if ("webkitSpeechRecognition" in window) {
    start_button.style.display = "inline-block"; var recognition = new webkitSpeechRecognition; recognition.continuous = !0; recognition.interimResults = !0; recognition.maxAlternatives = 1; recognition.lang = select_language.value; recognition.onstart = function (a) {
        a = (new Date).getTime();
        console.log("On Start" + a); searchFlag ? search_img.src = "../images/searchon.gif" : variables.intentionalPause || (start_img.src = "../images/micon2.gif"); symbolToAppend = null; variables.recognizing = !0; isResultInBuffer =
            !1; resultInBuffer = ""; lastStartTimeStamp = a; firstInterimTimeStamp = 0; window.clearTimeout(timeRunnerFromLastResult)
    }; recognition.onend = function (a) {
        a = (new Date).getTime();
        console.log("On end" + a); variables.recognizing = !1; isResultInBuffer && finalize(resultInBuffer, .5); if (!1 === variables.intentionalPause || isToRestartImmediately)
            return console.log("Ended unintentionally"), recognition.lang = select_language.value, recognition.start(), !1; start_img.src = "https://speechlogger.appspot.com/images/micoff2.png";
        return variables.intentionalPause =
            !0
    }; recognition.onspeechstart = function (a) {
        a = (new Date).getTime(); firstInterimTimeStamp = 0;
        console.log("On SpeechStart" + a); lastStartTimeStamp = a
    }; recognition.onspeechend = function () { }; recognition.onnomatch = function (a) { console.log("No match") }; recognition.onerror = function (a) { console.log("Error recognizing") }; recognition.onresult = function (a) {
        var c = new Date, b = c.getTime();
        console.log("Fired onresult");
        clearTimeout(sentenceTimeout);
        clearTimeout(paragraphTimeout); if ("undefined" === typeof a.results) recognition.onend =
            null, variables.intentionalPause = !0, recognition.stop(), upgrade(); else {
            lastResultTimeStamp = b; window.clearTimeout(timeRunnerFromLastResult); window.clearTimeout(t_punctuation); variables.oldTimestamp = variables.newTimestamp; 0 === variables.newTimestamp && (variables.oldTimestamp = variables.start_timestamp); variables.newTimestamp = b; var d = ""; variables.lastwasfinal && (variables.startSubTime = Math.max(variables.start_timestamp, variables.newTimestampFinal, variables.newTimestamp - 100 * a.results[a.resultIndex][0].transcript.length -
                500), variables.last_interim = "");
            c = new Date; variables.dif_final_interim = variables.newTimestamp - variables.oldTimestamp; str = ""; for (var e = a.resultIndex; e < a.results.length; ++e) {
                str = trimSpaces(a.results[e][0].transcript); if ("I " !== str.substring(0, 2) && "I'" !== str.substring(0, 2) || "en" !== select_language.value.split("-")[0]) str = str[0].toLowerCase() + str.substring(1, str.length); if (a.results[e].isFinal) {
                    if (resultInBuffer.length > a.results[e][0].transcript.length + 10 && (str = trimSpaces(resultInBuffer), "I " !== str.substring(0,
                        2) && "I'" !== str.substring(0, 2) || "en" !== select_language.value.split("-")[0]) && (str = str[0].toLowerCase() + str.substring(1, str.length)), finalize(str, a.results[e][0].confidence), !isPremium() && variables.recognizing && 0 >= 600 * getRemainingDollarBalance() + timeRemainingTranscription) {
                        variables.recognizing && startButton(); $("#purchaseModal").modal({ show: !0 });
                        return
                    }
                } else for (0 == firstInterimTimeStamp && (firstInterimTimeStamp = b), variables.lastwasfinal = !1, d += a.results[e][0].transcript, variables.last_interim = d, isResultInBuffer =
                    !0, resultInBuffer = d, c = new Date, null !== timeTimeout && (timeTimeout = setTimeout(onTimeTimeout, 1E4)), console.log(" ----- Interim result= " + a.results[e][0].transcript), str = " " + str, c = 0;
                    c < listBreakCommands.length;
                    c++)if (-1 !== str.indexOf(listBreakCommands[c])) {
                        restartListening(); isToRestartImmediately = !0;
                        return
                    }
            } interim_span.innerHTML = linebreak(resultInBuffer); document.querySelectorAll(".resultsClass").forEach(function (f) { f.scrollTop = f.scrollHeight })
        }
    }
} else upgrade();
function restartRecognition() { !0 === variables.recognizing && (variables.intentionalPause = !1, recognition.stop(), variables.recognizing = !1) }
function finalize(a, c) {
    clearTimeout(timeTimeout);
    clearTimeout(paragraphTimeout);
    clearTimeout(sentenceTimeout); timeTimeout = null; var b = new Date, d = b.getTime(); lastStartTimeStamp = variables.newTimestampFinal = d; isResultInBuffer = !1; resultInBuffer = ""; variables.lastwasfinal = !0; variables.last_interim = ""; interim_span.innerHTML = ""; variables.firstTime && (variables.firstTime = !1, localStorage.sessionIndex = parseFloat(localStorage.sessionIndex) + 1); firstInterimTimeStamp = 0;
    console.log(" --- Final result= " + a); switch (listActionCommands.indexOf(a)) {
        case 0:
            return
    }for (var e =
        0; e < listToReplaceCommands.length; e++)a = a.replace(listToReplaceCommands[e], listToReplaceMarks[e]); variables.resultTextInstance = new TextInstance; variables.resultTextInstance.textContent = ""; variables.resultTextInstance.timeStamp = d; variables.resultTextInstance.timerStart = variables.startSubTime - variables.start_timestamp + variables.timer; variables.resultTextInstance.timerEnd = d - variables.start_timestamp + variables.timer; variables.resultTextInstance.confidence = c; variables.resultTextInstance.id = d; variables.resultTextInstance.lang =
            source_lang; variables.resultTextInstance.targetLang = trans_lang; timeBox = '<div class="realTimeDisplay">' + addZero(b.getHours()) + ":" + addZero(b.getMinutes()) + ":" + addZero(b.getSeconds()) + '</div><div class="difTimeDisplay">' + addZero(Math.floor(variables.resultTextInstance.timerEnd / 36E5)) + ":" + addZero(Math.floor(variables.resultTextInstance.timerEnd % 36E5 / 6E4)) + ":" + addZero(Math.floor(variables.resultTextInstance.timerEnd % 6E4 / 1E3)) + "</div>"; "true" === localStorage.getItem("autoPunctuation") ? (variables.resultTextInstance.textContent =
                prepareText(punctuate(a), !1), variables.recognizing && (paragraphTimeout = setTimeout(onParagraphTimeout, 3E3, d))) : variables.resultTextInstance.textContent = prepareText(a, !1); null !== symbolToAppend && (variables.resultTextInstance.textContent += symbolToAppend, symbolToAppend = null); variables.sentence += variables.resultTextInstance.textContent;
    currentSession.transcript.push(variables.resultTextInstance); final_span.innerHTML += variables.resultTextInstance.toHTML(parseFloat(localStorage.threshhold_confidence))[0];
    "true" === localStorage.translation && source_lang !== trans_lang && (b = document.createElement("script"), b.type = "text/javascript", b.src = "https://www.googleapis.com/language/translate/v2?key=AIzaSyBqx6Kb6vDKGfIv1WebbmnfTRhj1UcbrW8&source=" + source_lang + "&target=" + trans_lang + "&callback=translateText&q=" + variables.resultTextInstance.textContent, document.getElementsByTagName("head")[0].appendChild(b)); "true" === localStorage.getItem("autoSave") && localSave()
}
function prepareText(a, c) {
    if (0 < a.length) {
        var b = c ? document.getElementById("translations").innerText : document.getElementById("results").innerText; b = b.substring(b.length - 5); var d = 0 < b.length && " " === b[b.length - 1]; b = trimSpaces(b); if (isLastSymbolAnyOf(b, END_OF_SENTENCE_SYMBOLS) || "" == b || "null" === b) a = capitalize(a); 0 < b.length && !d && -1 === [NEW_LINE, "("].indexOf(b[b.length - 1]) && -1 === ".,;:?!)".split("").indexOf(a[0]) && (a = " " + a);
        return a
    }
    return ""
}
function isLastSymbolAnyOf(a, c) {
    for (var b, d = 0; d < c.length; d++)if (b = c[d], a.slice(a.length - b.length) === b)
        return !0;
    return !1
} function insertSymbol(a) { variables.recognizing && 0 < resultInBuffer.length ? (symbolToAppend = a, restartListening()) : (symbolToAppend = null, finalize(a, 1)) } function upgrade() {
    start_button.style.visibility = "hidden";
    alertNotification(MSG_UPGRADE)
} var two_line = /\n\n/g, one_line = /\n/g; function linebreak(a) {
    return a.replace(two_line, "<p></p>").replace(one_line, "<br>")
}
function trimSpaces(a) {
    for (; " " === a[0];)a = a.slice(1); for (; " " === a[a.length - 1];)a = a.slice(0, a.length - 1);
    return a
} var first_char = /\S/; function capitalize(a) {
    return a.replace(first_char, function (c) {
        return c.toUpperCase()
    })
} function endVoiceSearch() { searchFlag && (variables.intentionalPause = !1, variables.recognizing && pauseRecognition()) }
function searchStartButton(a) { variables.intentionalPause = !1; variables.recognizing ? pauseRecognition() : (localStorage.selected_language_index = select_language.selectedIndex, localStorage.selected_dialect_index = select_language.selectedIndex, recognition.lang = select_language.value, recognition.maxAlternatives = 1, recognition.continuous = !1, recognition.interimResults = !1, searchFlag = !0, recognition.start(), search_img.src = "../images/searchslash.png") }
function restartListening() { variables.recognizing && (isToRestartImmediately = !0, variables.intentionalPause = !1, recognition.stop()) }
function startButton(a) {
    window.clearTimeout(timeRunnerFromLastResult); variables.intentionalPause = !1; if (variables.recognizing) pauseRecognition(); else if (!isPremium() && 0 >= 600 * getRemainingDollarBalance() + timeRemainingTranscription) $("#purchaseModal").modal({ show: !0 }); else {
        localStorage.selected_language_index = select_language.selectedIndex; localStorage.selected_dialect_index = select_language.selectedIndex; recognition.lang = select_language.value; recognition.maxAlternatives = 1; updateTranslateLang(); recognition.continuous =
            !0; recognition.interimResults = !0; searchFlag = !1; try { recognition.start() } catch (c) { } interim_span.innerHTML = ""; start_img.src = "../images/micslash2.png";
        a = (new Date).getTime(); variables.start_timestamp = a
    }
} function punctuationPreferences() { $("#punctuation_activity").fadeIn(500) }
function removePunctSequence(a, c, b) {
    var d = select_language.value.split("-", 1)[0], e = localStorage.getItem(d + "_" + c + "_" + b + "_omit"); null !== e ? -1 === e.indexOf(a) && (e += a + ";") : e = a + ";"; localStorage.setItem(d + "_" + c + "_" + b + "_omit", e); e = localStorage.getItem(d + "_" + c + "_" + b); if (null !== e) { var f = new RegExp(a, "gi"); e = e.replace(f, ""); for (f = RegExp(";;", "g"); -1 !== e.indexOf(";;");)e = e.replace(f, ";"); ";" === e[0] && (e = e.substring(1)); localStorage.setItem(d + "_" + c + "_" + b, e) } for (d = punctMarks[c]; -1 !== d[b].indexOf(a);)d[b].splice(d[b].indexOf(a),
        1); punctMarks[c][b] = d[b]; updateTagList(b)
}
function addPunctSequences(a, c, b) {
    var d = select_language.value.split("-", 1)[0], e = localStorage.getItem(d + "_" + c + "_" + b), f = localStorage.getItem(d + "_" + c + "_" + b + "_omit");
    a = a.replace(/[$<>{}^&/]/g, " ");
    a = a.toLowerCase();
    a = a.split(";"); for (var g = punctMarks[c], h, k = 0; k < a.length; k++)if (sequence = a[k], null !== sequence) {
        for (; " " === sequence[0];)sequence = sequence.substring(1); for (; " " === sequence[sequence.length - 1];)sequence = sequence.substring(sequence.length - 1); if (!(1 > sequence.length) && (null !== e ? -1 === e.indexOf(sequence) &&
            (e += sequence + ";") : e = sequence + ";", localStorage.setItem(d + "_" + c + "_" + b, e), -1 === g[b].indexOf(sequence) && (g[b] = g[b].concat([sequence])), null !== f)) { h = new RegExp(sequence, "gi"); f = f.replace(h, ""); for (h = RegExp(";;", "g"); -1 !== f.indexOf(";;");)f = f.replace(h, ";"); ";" === f[0] && (f = f.substring(1)); localStorage.setItem(d + "_" + c + "_" + b + "_omit", f) }
    } punctMarks[c][b] = g[b]; updateTagList(b)
}
function generateMarks(a, c) {
    var b = select_language.value.split("-", 1)[0], d = localStorage.getItem(b + "_" + a + "_" + c), e = localStorage.getItem(b + "_" + a + "_" + c + "_omit"), f = []; if ("en" == b) {
        "question" == a && "start" == c ? f = "what;why;how;who;do;when;will;whom;where;can;could;would;does;is;are;were;can't you;don't you think;didn't you;don't you know;don't they".split(";") : "question" == a && "any" == c ? f = [] : "question" == a && "end" == c ? f = ["question mark"] : "colon" == a && "start" == c ? f = ["here are", "here is"] : "colon" == a && "any" == c ? f = ["the following"] :
            "colon" == a && "end" == c ? f = ["as follows", "colon"] : "exclamation" == a && "start" == c ? f = ["wow", "see you", "love you"] : "exclamation" == a && "any" == c ? f = ["hell no", "must be kidding", "no way", "sure thing"] : "exclamation" == a && "end" == c && (f = "unbelievable;exclamation mark;for sure;sure thing;i wish;you wish;love you;you wish".split(";"));
        console.log(b + " " + a + " " + c + ": " + f + "; "); if (null !== d) { b = d.split(";"); for (var g = 0; g < b.length; g++)d = b[g], null !== d && (1 > d.length || -1 === f.indexOf(d) && (f = f.concat([d]))) } if (null !== e) for (b = e.split(";"),
            g = 0; g < b.length; g++)for (; -1 !== f.indexOf(b[g]);)f.splice(f.indexOf(b[g]), 1); for (; -1 !== f.indexOf("");)f.splice(f.indexOf(""), 1); punctMarks[a][c] = f; updateTagList(c)
    }
} function showInfo(a) {
    if (a) {
        for (var c = info.firstChild;
            c;
            c = c.nextSibling)c.style && (c.style.display = c.id == a ? "inline" : "none"); info.style.visibility = "visible"
    } else info.style.visibility = "hidden"
} function switchTranscript(a, c) { document.getElementById("results_" + a) && (document.getElementById("results_" + a).innerHTML = c) }
function setPunctuation(a) {
    previousStr = trimSpaces(a); if (isLastSymbolAnyOf(previousStr, PUNCTUATION_SYMBOLS) || "" == previousStr || "null" === previousStr || null !== symbolToAppend)
        return ""; for (; " " === a[0];)a = a.slice(1);
    return markFit(a, "question") ? "?" : markFit(a, "colon") ? ":" : markFit(a, "exclamation") ? "!" : "."
}
function punctuate(a) {
    var c = ""; variables.punctuation = "."; for (var b; " " === a[0];)a = a.slice(1); if ("en" == select_language.value.split("-", 1)[0] && -1 == a.indexOf(",")) for (var d = 0; d < en_comma_start.length; d++) { b = en_comma_start[d].length; var e = new RegExp(en_comma_start[d], "i"); if (e.test(a.slice(0, b + 1))) { for (e = a.slice(b); " " === e[0];)e = e.slice(1); "to" != e.slice(0, 2) && "there" != e.slice(0, 5) && (c = a.slice(0, b - 1) + ", ", a = e) } } variables.punctuation = setPunctuation(a);
    return c + a + variables.punctuation
}
function markFit(a, c) {
    for (var b = punctMarks[c], d = 0; d < b.start.length; d++)if (regex = new RegExp(b.start[d], "i"), regex.test(a.slice(0, b.start[d].length + 1)))
        return !0; for (d = 0; d < b.end.length; d++)if (regex = new RegExp(b.end[d], "i"), regex.test(a.slice(0 - b.end[d].length - 1)))
            return !0; for (d = 0; d < b.any.length; d++)if (regex = new RegExp(b.any[d], "i"), regex.test(a))
                return !0;
    return !1
}
function translateText(a) {
    speechSynthesis.cancel(); if ("undefined" === typeof a.data) currentSession.transcript[currentSession.transcript.length - 1].translatedContent = ""; else {
        var c = prepareText(a.data.translations[0].translatedText, !0);
        currentSession.transcript[currentSession.transcript.length - 1].translatedContent = c; final_translation.innerHTML += currentSession.transcript[currentSession.transcript.length - 1].toHTML(parseFloat(localStorage.threshhold_confidence))[1]; document.querySelectorAll(".resultsClass").forEach(function (b) {
            b.scrollTop =
                b.scrollHeight
        })
    } "true" === localStorage.readOut && "NA" !== readLang && (temporary_html.innerHTML = a.data.translations[0].translatedText, msg.lang = readLang, msg.text = temporary_html.innerText, speechSynthesis.speak(msg))
} function addZero(a) {
    10 > a && (a = "0" + a);
    return a
} function addDoubleZero(a) {
    100 > a && (a = 10 > a ? "00" + a : "0" + a);
    return a
}
function localSave() {
    currentSession.session_title = session_title.innerText;
    currentSession.timer = variables.timer;
    currentSession.notes = speaker.value; var a = JSON.stringify(currentSession); 2.2 < (JSON.stringify(localStorage).length + a.length) / 1E6 && alertNotification(MSG_NOAVAILABLESPACE); if (!variables.savedOnce) {
        for (variables.savedOnce = !0; -1 !== localStorage.sessionsList.indexOf(saveToIndex);)saveToIndex = localStorage.sessionIndex, localStorage.sessionIndex = parseFloat(localStorage.sessionIndex) + 1; localStorage.sessionsList +=
            saveToIndex + ","
    } localStorage.setItem("session_title_" + saveToIndex, session_title.innerText); localStorage.setItem("session_" + saveToIndex, a); sessionsDropdown()
} function deleteSession(a) { saveToIndex == a && newButton(); localStorage.sessionsList = localStorage.sessionsList.replace(a + ",", ""); localStorage.removeItem("session_" + a); localStorage.removeItem("session_title_" + a); sessionsDropdown() }
function loadSession(a) {
    pauseRecognition(); variables = new Variables; if (null !== localStorage.getItem("session_" + a)) { var c = localStorage.getItem("session_" + a); saveToIndex = a; variables.savedOnce = !0 } else c = a, saveToIndex = localStorage.sessionIndex;
    currentSession = new Session; $.extend(currentSession, JSON.parse(c)); for (a = 0;
        a < currentSession.transcript.length;
        a++)c = new TextInstance, $.extend(c, currentSession.transcript[a]), currentSession.transcript[a] = c;
    a = currentSession.toHTML(localStorage.threshhold_confidence);
    final_span.innerHTML = a[0]; final_translation.innerHTML = a[1]; session_title.innerHTML = currentSession.session_title; speaker.value = currentSession.notes; variables.firstTime = !1; variables.timer = parseFloat(currentSession.timer); variables.addLineBreaks = !0; uncertain_checkbox.checked ? $(".uncertain").addClass("red_font") : $(".uncertain").removeClass("red_font")
}
function pauseRecognition() { variables.recognizing && (isToRestartImmediately = !1, variables.intentionalPause = !0, variables.timer = variables.timer + Date.now() - variables.start_timestamp, start_img.src = "https://speechlogger.appspot.com/images/micoff2.png", recognition.stop()); 2 <= final_span.innerHTML.length && save_checkbox.checked && localSave() } function toastNotification(a) { var c = 1E3 + a.length / 5 * 150; notification.innerHTML = a; $("#notification").fadeIn(1E3, function () { $("#notification").delay(c).fadeOut(1E3) }) }
function alertNotification(a, c) {
    bindEsc(); info.innerHTML = a; $("#alert_container").fadeIn(500);
    alert_title.innerHTML = "string" === typeof c ? c : MSG_DEFAULT_NOTE_TITLE
} function srtTime(a) {
    return addZero(Math.floor(a / 36E5)) + ":" + addZero(Math.floor(a % 36E5 / 6E4)) + ":" + addZero(Math.floor(a % 6E4 / 1E3)) + "," + addDoubleZero(Math.floor(a % 1E3))
}
function Session() {
    this.transcript = [];
    this.session_title;
    this.timer = 0;
    this.notes;
    this.toHTML = function (a) {
        for (var c, b = ["", ""], d = this.transcript, e = 0; e < d.length; e++)c = d[e].toHTML(a), 0 < e && d[e].timerStart - d[e - 1].timerEnd >= time_to_newline && (b[0] += "<br>", b[1] += "<br>", d[e].timerStart - d[e - 1].timerEnd > time_to_2lines && (b[0] += "<br>", b[1] += "<br>")), b[0] += c[0], b[1] += c[1];
        return b
    }
}
Session.prototype.toTXT = function (a) {
    var c = "", b = ""; new TextInstance; switch (a) {
        case "none": for (var d = 0; d < this.transcript.length; d++)a = this.transcript[d], 0 < d && this.transcript[d].timerStart - this.transcript[d - 1].timerEnd >= time_to_newline && (c += "<br>", b += "<br>", this.transcript[d].timerStart - this.transcript[d - 1].timerEnd > time_to_2lines && (c += "<br>", b += "<br>")), c += a.textContent, b += a.translatedContent; break;
        case "real": for (d = 0; d < this.transcript.length; d++)a = this.transcript[d], c += srtTime(a.timeStamp) + " - " + a.textContent +
            "\r\n", "" !== a.translatedContent && (b += srtTime(a.timeStamp) + " - " + a.translatedContent + "\r\n"); break;
        case "timer": for (d = 0; d < this.transcript.length; d++)a = this.transcript[d], c += srtTime(a.timeStart) + " - " + a.textContent + "\r\n", "" !== a.translatedContent && (b += srtTime(a.timeStart) + " - " + a.translatedContent + "\r\n"); break;
        default:
            return -1
    }return c + "\r\n -------------------------------- \r\n" + b
};
Session.prototype.toSRT = function (a) {
    var c = ""; new TextInstance; switch (a) {
        case "transcript": for (var b = 1; b <= this.transcript.length; b++)a = this.transcript[b - 1], c += b + "\r\n" + srtTime(a.timerStart) + " --\x3e " + srtTime(a.timerEnd) + "\r\n" + capitalize(a.textContent) + "\r\n\r\n"; break;
        case "translation": for (b = 1; b <= this.transcript.length; b++)a = this.transcript[b - 1], "" !== a.translatedContent && (c += b + "\r\n" + srtTime(a.timerStart) + " --\x3e " + srtTime(a.timerEnd) + "\r\n" + capitalize(a.translatedContent) + "\r\n\r\n"); break;
        case "combined": for (b =
            1; b <= this.transcript.length; b++)a = this.transcript[b - 1], c += b + "\r\n" + srtTime(a.timerStart) + " --\x3e " + srtTime(a.timerEnd) + "\r\n" + capitalize(a.textContent) + "\r\n Translation: " + capitalize(a.translatedContent) + "\r\n\r\n"; break;
        default:
            return -1
    }return c
}; function TextInstance() {
    this.translatedContent = this.textContent = "";
    this.timerEnd = this.timerStart = this.timeStamp = 0;
    this.confidence = 1;
    this.id = "";
    this.lang = "en";
    this.targetLang = "fr"
}
TextInstance.prototype.toHTML = function (a) {
    var c = ["", ""], b = new Date(this.timeStamp); localStorage.displayTimeFlag = select_timeDisplay.value; switch (localStorage.displayTimeFlag) {
        case "real": timeBox = '<div class="realTimeDisplay timeDisplay">' + addZero(b.getHours()) + ":" + addZero(b.getMinutes()) + ":" + addZero(b.getSeconds()) + '</div><div class="difTimeDisplay">' + addZero(Math.floor(this.timerStart / 36E5)) + ":" + addZero(Math.floor(this.timerStart % 36E5 / 6E4)) + ":" + addZero(Math.floor(this.timerStart % 6E4 / 1E3)) + "</div>";
            break;
        case "dif": timeBox = '<div class="realTimeDisplay">' + addZero(b.getHours()) + ":" + addZero(b.getMinutes()) + ":" + addZero(b.getSeconds()) + '</div><div class="difTimeDisplay timeDisplay">' + addZero(Math.floor(this.timerStart / 36E5)) + ":" + addZero(Math.floor(this.timerStart % 36E5 / 6E4)) + ":" + addZero(Math.floor(this.timerStart % 6E4 / 1E3)) + "</div>"; break;
        default: timeBox = '<div class="realTimeDisplay">' + addZero(b.getHours()) + ":" + addZero(b.getMinutes()) + ":" + addZero(b.getSeconds()) + '</div><div class="difTimeDisplay">' +
            addZero(Math.floor(this.timerStart / 36E5)) + ":" + addZero(Math.floor(this.timerStart % 36E5 / 6E4)) + ":" + addZero(Math.floor(this.timerStart % 6E4 / 1E3)) + "</div>"
    }b = -1 != RTL_languages.indexOf(this.lang) ? '<a dir="rtl" class="results_anchor" contenteditable="false" style="cursor: text" id="results_' + this.timeStamp + '">' : '<a class="results_anchor" contenteditable="false" style="cursor: text" id="results_' + this.timeStamp + '">'; var d = -1 != RTL_languages.indexOf(this.targetLang) ? '<a dir="rtl" class="results_anchor" contenteditable="false" style="cursor: text" id="trans_' +
        this.timeStamp + '">' : '<a class="results_anchor" contenteditable="false" style="cursor: text" id="trans_' + this.timeStamp + '">';
    this.confidence < a ? uncertain_checkbox.checked ? (c[0] = linebreak(capitalize('<span class="text_results uncertain red_font">' + b + this.textContent + "</a>" + timeBox + "</span>")), "" !== this.translatedContent && (c[1] = linebreak(capitalize('<span class="text_results uncertain red_font">' + d + this.translatedContent + "</a>" + timeBox + "</span>")))) : (c[0] = linebreak(capitalize('<span class="text_results uncertain">' +
        b + this.textContent + "</a>" + timeBox + "</span>")), "" !== this.translatedContent && (c[1] = linebreak(capitalize('<span class="text_results uncertain">' + d + this.translatedContent + "</a>" + timeBox + "</span>")))) : (c[0] = linebreak(capitalize('<span class="text_results">' + b + this.textContent + "</a>" + timeBox + "</span>")), "" !== this.translatedContent && (c[1] = linebreak(capitalize('<span class="text_results">' + d + this.translatedContent + "</a>" + timeBox + "</span>"))));
    return c
};
function PunctMarks() {
    this.question = new PunctuationMark("question");
    this.colon = new PunctuationMark("colon");
    this.exclamation = new PunctuationMark("exclamation")
}
function PunctuationMark(a) {
    this.start = [];
    this.end = [];
    this.any = []
} function demo_credit() { 200 > Number(localStorage.getItem("currentCredit")) && credit(1E3) } function open_fb_share() { window.open("https://www.facebook.com/sharer/sharer.php?u=" + document.URL) }
function initializeLanguages() {
    for (var a = [["en-US", "US English"], ["id-ID", "Bahasa, Indonesia"], ["ms-MY", "Bahasa, Melayu"], ["bg-BG", "Bulgarian"], ["cs-CZ", "Czech"], ["da-DK", "Dansk (Danish)"], ["de-DE", "Deutsch"], ["nl-NL", "Dutch, Netherlands"], ["en-AU", "English, Australia"], ["en-CA", "English, Canada"], ["en-IN", "English, India"], ["en-NZ", "English, New Zealand"], ["en-ZA", "English, S. Africa"], ["en-GB", "English, UK"], ["en-US", "English, US"], ["es-AR", "espa\u00f1ol, Argentina"], ["es-BO", "espa\u00f1ol, Bolivia"],
    ["es-CL", "espa\u00f1ol, Chile"], ["es-CO", "espa\u00f1ol, Colombia"], ["es-CR", "espa\u00f1ol, Costa Rica"], ["es-EC", "espa\u00f1ol, Ecuador"], ["es-SV", "espa\u00f1ol, El Salvador"], ["es-ES", "espa\u00f1ol, Espa\u00f1a"], ["es-US", "espa\u00f1ol, Estados Unidos"], ["es-GT", "espa\u00f1ol, Guatemala"], ["es-HN", "espa\u00f1ol, Honduras"], ["es-MX", "espa\u00f1ol, M\u00e9xico"], ["es-NI", "espa\u00f1ol, Nicaragua"], ["es-PA", "espa\u00f1ol, Panam\u00e1"], ["es-PY", "espa\u00f1ol, Paraguay"], ["es-PE", "espa\u00f1ol, Per\u00fa"],
    ["es-PR", "espa\u00f1ol, Puerto Rico"], ["es-DO", "espa\u00f1ol, R. Dominicana"], ["es-UY", "espa\u00f1ol, Uruguay"], ["es-VE", "espa\u00f1ol, Venezuela"], ["fil-PH", "Filipino"], ["fr-FR", "fran\u00e7ais"], ["is-IS", "Icelandic"], ["zu-ZA", "IsiZulu"], ["it-IT", "italiano"], ["it-CH", "italiano, Svizzera"], ["ko-KR", "Korean"], ["hu-HU", "Magyar"], ["nb-NO", "Norwegian"], ["pl-PL", "Polski"], ["pt-BR", "Portugu\u00eas, Brasil"], ["pt-PT", "Portugu\u00eas, Portugal"], ["ro-RO", "rom\u00e2n\u0103"], ["ru-RU", "\u0420\u043e\u0441\u0441\u0438\u0438"],
    ["sr-RS", "Serbian"], ["sk-SK", "Slovak"], ["fi-FI", "Suomi"], ["sv-SE", "Svenska"], ["tr-TR", "Turkish"], ["el-GR", "\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac"], ["cmn-Hans-CN", "\u666e\u901a\u8bdd (\u4e2d\u56fd\u5927\u9646)"], ["cmn-Hans-HK", "\u666e\u901a\u8bdd (\u9999\u6e2f)"], ["cmn-Hant-TW", "\u4e2d\u6587 (\u53f0\u7063)"], ["yue-Hant-HK", "\u7cb5\u8a9e (\u9999\u6e2f)"], ["ja-JP", "\u65e5\u672c\u306e (Japanese)"], ["th-TH", "\u0e44\u0e17\u0e22 (Thai)"], ["he-IL", "\u05e2\u05d1\u05e8\u05d9\u05ea"], ["ar-DZ", "\u0627\u0644\u0639\u0631\u0628\u064a\u0629, Algeria"],
    ["ar-EG", "\u0627\u0644\u0639\u0631\u0628\u064a\u0629, Egypt"], ["ar-IQ", "\u0627\u0644\u0639\u0631\u0628\u064a\u0629, Iraq"], ["ar-JO", "\u0627\u0644\u0639\u0631\u0628\u064a\u0629, Jordan"], ["ar-KW", "\u0627\u0644\u0639\u0631\u0628\u064a\u0629, Kuwait"], ["ar-LB", "\u0627\u0644\u0639\u0631\u0628\u064a\u0629, Lebanon"], ["ar-MA", "\u0627\u0644\u0639\u0631\u0628\u064a\u0629, Morocco"], ["ar-QA", "\u0627\u0644\u0639\u0631\u0628\u064a\u0629, Qatar"], ["ar-SA", "\u0627\u0644\u0639\u0631\u0628\u064a\u0629, Saudi Arabia"],
    ["ar-AE", "\u0627\u0644\u0639\u0631\u0628\u064a\u0629, UAE"]], c = 0;
        c < a.length;
        c++)select_language.options[c] = new Option(a[c][1], a[c][0]);
    return a
};
